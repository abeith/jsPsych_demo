* About

  Building an experiment with jsPsych gives a huge amount of flexibility and extensibility over other experiment builders. As experiments get more complex it can be challenging to make the leap from developing on your own computer to deploying on a server. This demo aims to provide a containerised development environment that eases this transition. 
  
* Quick Start
** Option 1: Pull from Github
*** Create server/DB
    
    #+begin_src sh
      git clone https://github.com/abeith/jsPsych_demo.git
      cd jsPsych_demo
      docker-compose up -d --build
    #+end_src
  
*** Run R scripts

    #+begin_src R :tangle R/init.R :exports none
      source('R/init_db.R')
      source('R/init_table.R')
      source('R/resp_table.R')
    #+end_src
       
    #+begin_src sh
      Rscript R/init.R
    #+end_src
   
** Option 2: Emacs orgmode
*** Run this block to create folders
     
    #+begin_src sh :results silent
      mkdir R
      mkdir -p server/www/private
    #+end_src
       
*** Tangle all the blocks (C-c C-v C-t)
*** Create the server in Docker from the command line (make sure you're in this directory)

    #+begin_src sh :eval never
      docker-compose up -d --build
    #+end_src
  
*** Create the database in R

    You won't need to do this in production as database will already exist

    #+CALL: init_db()

*** Create the tables in R

    #+CALL: init_table()

    #+CALL: resp_table()
   
*** Check if it works

    Go to localhost:8080 in your browser.
   
* Server
** Dockerfile

   The image didn't have the right packages installed so need to add this
   
   #+begin_src text :tangle server.Dockerfile
     FROM php:7.1-apache
     RUN docker-php-ext-install mysqli pdo pdo_mysql
   #+end_src
  
** Docker-compose

   Set up server and database with a single configuration
   
   #+begin_src yaml :tangle docker-compose.yml
     version: '3.1'
     
     services:
       php:
         build:
           context: .
           dockerfile: server.Dockerfile
         container_name: server
         ports:
           - 8080:80
         links:
           - "db:database"
         restart: always
         volumes:
           - ./server/www:/var/www/html/
       db:
         container_name: db
         image: mariadb:10.4
         environment:
           MYSQL_USER: root
           MYSQL_PASSWORD: example
           MYSQL_ROOT_PASSWORD: example
         ports:
           - 3306:3306
         restart: always
         volumes:
           - ./server/db:/var/lib/mysql
     
     #+end_src

* Database setup
** Init DB

   #+NAME: init_db
   #+begin_src R :results silent :tangle R/init_db.R
     con <- DBI::dbConnect(
                   RMariaDB::MariaDB(),
                   host = '127.0.0.1',
                   port = '3306',
                   user = 'root',
                   password = 'example'
                 )
     
     DBI::dbSendStatement(con, 'CREATE DATABASE jsPsych;')
     
     DBI::dbDisconnect(con)    
   #+end_src
  
** Create survey questions

   This is one way to do it but you'll want to figure out what works best for you. The JSON objects that jsPsych uses are saved as strings in the database table. There are different options for sequencing the trials:
   * R: Make lists of question sequences and filter results by list when pulling them (would require a list column in the table below) 
   * SQL: Create an SQL query that sorts them and use php to execute that query
   * PHP: Pull all the questions from the database and write php code to sequence them
   * JavaScript: Write js code to sequence questions
   * jsPsych: Use build-in jsPsych functions to sequence (https://www.jspsych.org/7.1/reference/jspsych-randomization/)

   There are also other ways of storing this data: e.g. Make type, prompt, name, options and required columns. The options column would either have to be a string that's later converted to JSON or a reference for another table that contains the options as nested columns aren't possible.
  
   #+NAME: init_table
   #+begin_src R :results silent :tangle R/init_table.R
   
     con <- DBI::dbConnect(
                   RMariaDB::MariaDB(),
                   host = '127.0.0.1',
                   port = '3306',
                   user = 'root',
                   password = 'example',
                   dbname = 'jsPsych'
                 )
    
     trial_1 <- list(
       type = 'html',
       prompt = 'Please answer the following questions'
     )
    
     trial_2 <- list(
       type = 'multi-choice',
       prompt = 'Which of the following do you like the most?',
       name = 'VegetablesLike',
       options = c('Tomato', 'Cucumber', 'Eggplant', 'Corn', 'Peas'),
       required = TRUE
     )
    
     trial_3 <- list(
       type = 'multi-select',
       prompt = 'Which of the following do you like?',
       name = 'FruitLike',
       options = c('Apple', 'Banana', 'Orange', 'Grape', 'Strawberry'),
       required = TRUE
     )
    
     json_list <- purrr::map(list(trial_1, trial_2, trial_3), jsonlite::toJSON, auto_unbox = TRUE)
    
     item_strings <- tibble::tibble(
                               item = 1:3,
                               json = purrr::map_chr(json_list, as.character)
                             )
    
     DBI::dbWriteTable(con, name = 'item_strings', item_strings)
    
     DBI::dbDisconnect(con)
   #+end_src

** Create response table

   #+NAME: respTable
   #+begin_src sql
     CREATE OR REPLACE TABLE surveyResp (
       question VARCHAR(50),
       response VARCHAR(50)
       )
   #+end_src

   #+NAME: resp_table
   #+begin_src R :colnames yes :noweb yes :results silent :tangle R/resp_table.R
     con <- DBI::dbConnect(
                   RMariaDB::MariaDB(),
                   host = '127.0.0.1',
                   port = '3306',
                   user = 'root',
                   password = 'example',
                   dbname = 'jsPsych'
                 )
       
     query <- 
       <<quote-blks("respTable")>>
     DBI::dbSendQuery(con, query)
     DBI::dbDisconnect(con)
   #+end_src
   
** Create likert response table

   #+NAME: likertTable
   #+begin_src sql
     CREATE OR REPLACE TABLE likertResp (
       rt INT(5),
       question VARCHAR(50),
       response VARCHAR(50),
       trial_type VARCHAR(50),
       trial_index INT(3),
       time_elapsed INT(5),
       internal_node_id VARCHAR(50)
       )
   #+end_src

   #+NAME: likert_table
   #+begin_src R :colnames yes :noweb yes :results silent
     con <- DBI::dbConnect(
                   RMariaDB::MariaDB(),
                   host = '127.0.0.1',
                   port = '3306',
                   user = 'root',
                   password = 'example',
                   dbname = 'jsPsych'
                 )
       
     query <- 
       <<quote-blks("likertTable")>>
     DBI::dbSendQuery(con, query)
     DBI::dbDisconnect(con)
   #+end_src
   
* Web
** Backend
*** MariaDB config

    #+begin_src text :tangle server/www/private/conf.ini
      [database]
      driver = mysql
      host = db
      port = 3306          
      dbname = jsPsych
      username = root
      password = example
    #+end_src

*** PHP connection class

    #+begin_src php :tangle server/www/private/dbConnect.php
      <?php
      class dbConnect {
          private $pdo = null;
     
          public function getPDO(){
              return $this->pdo;
          }
     
          public function __construct(){
              try {
                  $conf = parse_ini_file(__DIR__ . '/conf.ini', true);
                  $dsn = sprintf('mysql:host=%s;port=%s;dbname=%s', $conf['database']['host'], $conf['database']['port'], $conf['database']['dbname']);
                  $username = $conf['database']['username'];
                  $password = $conf['database']['password'];
     
                  $this->pdo = new PDO($dsn, $username, $password);
                  // set the PDO error mode to exception
                  $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
              } catch(PDOException $e) {
                  echo "<script>console.log('Connection failed: " . $e->getMessage() . "')</script>";
              }
          }
      }
    #+end_src
   
*** htaccess

    This prevents anyone looking at this folder
   
    #+begin_src .htaccess :tangle server/www/private/.htaccess
     <Location />
     Order deny, allow
     </Location>
    #+end_src
  
*** php scripts

    Replacing these with a REST API built with a modern framework would be much cleaner. Could potentially remove need to know any PHP or SQL.

    * JS: express.js
      * Already writing JS code but would require a different deployment server
    * PHP: Laravel or Symfony
      * Probably would still require a different deployment server so limited benefits
    * R: PlumbeR
      * Using dbplyr for complex SQL queries would be very nice. Could also use it to handle complex analysis for dynamic experiments. Not sure how plumbeR compares to JS/Python equivalents in terms of performance.
    * Python: Django or Flask
      * Adds a new language but would have similar benefits to plumbeR but with a very active developer community.

**** fetchTrials.php
     Fetch trials from database using php
   
      #+begin_src php :tangle server/www/fetchTrials.php
        <?php
     
        require_once(__DIR__ . '/private/dbConnect.php');
        $dbCon = new dbConnect();
        $pdo = $dbCon->getPDO();
     
        $query = "SELECT * FROM item_strings";
     
        $sth = $pdo->query($query);
     
        $result = $sth->fetchAll(PDO::FETCH_ASSOC);
     
        echo json_encode($result);
     
        ?> 
      #+end_src

**** saveResponses.php

     #+begin_src php :tangle server/www/saveResponses.php
       <?php
      
       require_once(__DIR__ . '/private/dbConnect.php');
       $dbCon = new dbConnect();
       $pdo = $dbCon->getPDO();
      
       $post_json = json_decode(file_get_contents('php://input'), true);
      
       $query = "INSERT INTO surveyResp ";
       $query .= "(question, response) ";
       $query .= "VALUES (:question, :response)";
      
       $stmt = $pdo->prepare($query);
      
       try{
      
           foreach($post_json as $question => $response){
            
               $data = array(
                   ':question' => $question,
                   ':response' => $response
                   );
      
               $stmt->execute($data);
           }
      
           header('Content-Type: application/json');
           echo json_encode(array('success' => TRUE));
       }catch(PDOException $e){
           http_response_code(500);
           echo $e->getMessage();
       };
     #+end_src
     
** Frontend

   This example shows how to fetch trial data from a database, use that data to populate a jsPsych trial, and save participant responses to the database.
   
*** index.php

     Basic web page. Using a remote version of jsPsych for ease but this shouldn't be done in production. Saved this as php because that's the default index for the server.
   
      #+begin_src html :tangle server/www/index.php
        <!DOCTYPE html>
        <html>
          <head>
            <script src="https://unpkg.com/jspsych@7.1.0"></script>
            <link href="https://unpkg.com/jspsych@7.1.0/css/jspsych.css" rel="stylesheet" type="text/css" />
            <script src="https://unpkg.com/@jspsych/plugin-survey"></script>
          </head>
          <body>
            <script src="experiment.js"></script>
          </body>
        </html>
      #+end_src


*** experiment.js
  
    Read trials from database and run jsPsych experiment.

    Notes
    * Switched to using fetch API instead of XMLHttpRequest. Syntax is a bit cleaner and works well with async/await
    * Wrangling of jsPsych data object here is unpleasant but it works for demo purposes.
    * Data could also be sent at end of trial rather than end of experiment. This might be preferable as a function could be written for each trial type.
    * Used two different ways of writing functions. In this example I think =run_experiment()= is actually loaded before =postData()= but =postData()= is namespaced first? This is to do with /hoisting/. Functions defined as functions are hoisted to the top but functions defined as constants are evaluated sequentially. Leaving this for now as need to think about which way is best here and be consistent.
   
    #+begin_src js :tangle server/www/experiment.js
      const postData = async(data, uri) => {
          const settings = {
              method: 'POST',
              headers: {
                  Accept: 'application/json',
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)
          };
      
          try{
              const fetchResponse = await fetch(uri, settings);
              const data = await fetchResponse.json();
              console.log(data);
              return data;
          } catch(e){
              console.log(e);
              return false;
          }
      };
      
      var jsPsych = initJsPsych({
          on_finish: function(){
              let responses = jsPsych.data.get().trials[0].response;
              let questions = Object.keys(responses);
              questions.map(x => responses[x] = JSON.stringify(responses[x]))
      
              postData(responses, 'saveResponses.php')
          }
      });
      
      async function run_experiment(){
          let data = await postData({session_id: '1'}, 'fetchTrials.php');
          console.log(data);
      
          let pages = data.map(x => JSON.parse(x.json));
      
          let trial = {
              type: jsPsychSurvey,
              pages: [pages]
          };
      
          console.log(trial);
      
          let timeline = [trial];
      
          jsPsych.run(timeline);
      
      }
      
      run_experiment();
    #+end_src

    A more jsPsych way of doing things is to handle loading within the timeline. This example might seem like overkill but for a more complicated experiment this could make things a lot easier. This makes it possible to interact with the database at any stage. Accessible from localhost:8080/experiment_async.html

*** experiment_async.php
    
    #+begin_src html :tangle server/www/experiment_async.php
      <!DOCTYPE html>
      <html>
        <head>
          <script src="https://unpkg.com/jspsych@7.1.0"></script>
          <link href="https://unpkg.com/jspsych@7.1.0/css/jspsych.css" rel="stylesheet" type="text/css" />
          <script src="https://unpkg.com/@jspsych/plugin-survey"></script>
          <script src="https://unpkg.com/@jspsych/plugin-call-function"></script>
          <script src="https://unpkg.com/@jspsych/plugin-html-keyboard-response"></script>
        </head>
        <body>
          <script src="experiment_async.js"></script>
        </body>
      </html>
    #+end_src

*** experiment_async.js
    
    #+begin_src js :tangle server/www/experiment_async.js
      // jsPsych demo using trials to load and save data asynchronously
      
      // Functions //
      
      // General purpose function for posting data
      const postData = async(data, uri) => {
          const settings = {
              method: 'POST',
              headers: {
                  Accept: 'application/json',
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify(data)
          };
      
          try{
              const fetchResponse = await fetch(uri, settings);
              const data = await fetchResponse.json();
              // console.log(data);
              return data;
          } catch(e){
              console.log(e);
              return false;
          }
      };
            
      // function to simulate an asynchronous delay for testing
      const simulateDelay = () => {
          let test = new Promise((resolve, reject) => {
              setTimeout(() => {
                  resolve('message');
              }, 5000);
          });
      
          return test;
      };
      
      // This is a placeholder that would be called when the experiment is closed unexpectedly
      // Ethical implications of this should be considered. Is closing the window withdrawing from the experiment?
      const dataDump = async() => {
          return true;
      };
      
      // function to prepare data for jsPsychSurvey trial
      const getPages = () => {
          let data = jsPsych.data.getLastTrialData().trials[0].value;
          let pages = data.map(x => JSON.parse(x.json));
          return [pages];
      };
      
      // function to save data
      const saveResponses = () => {
          let responses = jsPsych.data.getLastTrialData().trials[0].response;
          let questions = Object.keys(responses);
          questions.map(x => responses[x] = JSON.stringify(responses[x]));
      
          let save_resp = postData(responses, 'saveResponses.php');
          return save_resp;
      };
      
      // jsPsych setup //
      
      var jsPsych = initJsPsych({
          on_finish: () => console.log('finished'),
          on_close: dataDump
      });
      
      // Trials //
      
      // Preloading trials
      
      let hello = {
          type: jsPsychHtmlKeyboardResponse,
          stimulus: 'Welcome to the experiment<br>You might not notice but I\'m fetching the trials now.<br>Press any key to continue',
          data: {
              trialData: () => postData({session_id: '1'}, 'fetchTrials.php'), // get the data as a promise
              test: simulateDelay
          }
      };
      
      let loading = {
          type: jsPsychHtmlKeyboardResponse,
          stimulus: 'Still loading...<br>(not really, just waiting on a timer)',
          on_load: async () => {
              await jsPsych.data.get().trials[0].test;
              await jsPsych.data.get().trials[0].trialData; // display trial until promise is fulfilled
              jsPsych.finishTrial();
          },
          choices: 'NO_KEYS'
      };
      
      let awaitData = {
          type: jsPsychCallFunction,
          async: true,
          func: async (done) => {
              let data = await jsPsych.data.get().trials[0].trialData; // resolve promise
              done(data);
          }
      };
      
      // Experiment trials
      
      let trial = {
          type: jsPsychSurvey,
          pages: getPages
      };
      
      // Data saving trials
      
      let bye = {
          type: jsPsychHtmlKeyboardResponse,
          stimulus: 'Thank you for taking part...',
          data: {
              saved: saveResponses, // post responses and get response as promise
              test: simulateDelay
          },
          trial_duration: 1000
      };     
      
      let saving = {
          type: jsPsychHtmlKeyboardResponse,
          stimulus: 'Please don\'t close the window...<br>we\'re still saving your data.',
          on_load: async () => {
              await jsPsych.data.getLastTrialData().trials[0].test;
              let save_status = await jsPsych.data.getLastTrialData().trials[0].saved; // display trial unil promise is fulfilled
              console.log(save_status); // you might want to check this and display an error trial if necessary
              jsPsych.finishTrial();
          },
          choices: 'NO_KEYS'
      };
      
      let saved = {
          type: jsPsychHtmlKeyboardResponse,
          stimulus: 'Data saved', // no need to resolve promise 
          trial_duration: 5000
      };
      
      // Run experiment //
      
      let timeline = [hello, loading, awaitData, trial, bye, saving, saved];
      
      jsPsych.run(timeline);
      
    #+end_src
    
* Utility
** SQL sourcing

   Got this from https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-sql.html. Lets you write tidy SQL and source it in R.
    
   #+name: quote-blks
   #+BEGIN_SRC emacs-lisp :var blk="abc" :var sep="\"\n\""
     (save-excursion
       (replace-regexp-in-string "\"\"" ""
                                 (mapconcat
                                  (lambda (x)
                                    (org-babel-goto-named-src-block x)
                                    (format "%S" (cadr  (org-babel-get-src-block-info  t))))
                                  (split-string blk "," t)
                                  sep)
                                 t t))
   #+END_SRC

** Uglify SQL

   Same idea as above but removes excess whitespace so code can be pasted into PHP as string without formatting. Good for very complex SQL queries.
   
   #+name: uglify-sql
   #+BEGIN_SRC emacs-lisp :var blk="abc" :var sep="\"\n\""
         (save-excursion
           (replace-regexp-in-string "[\n\s]+" " "
                                     (mapconcat
                                      (lambda (x)
                                        (org-babel-goto-named-src-block x)
                                        (format "%S" (cadr  (org-babel-get-src-block-info  t))))
                                      (split-string blk "," t)
                                      sep)
                                     t t)
                                     )
   #+END_SRC

* Analysis

** Check responses
   
   #+begin_src R
     library(DBI)
     library(tidyverse)
    
     con <- dbConnect(
       RMariaDB::MariaDB(),
       host = '127.0.0.1',
       port = '3306',
       user = 'root',
       password = 'example',
       dbname = 'jsPsych'
     )
    
     df <- tbl(con, 'surveyResp') %>%
       collect()
    
     dbDisconnect(con)
    
     tail(df)
    
   #+end_src
   
* Alternative insert method

  Write an SQL procedure to insert data. We then need to provide a JSON object as a string with all of these parameters
  
  #+name: insertProc
  #+begin_src sql
    CREATE OR REPLACE PROCEDURE insertLikertResp(IN json VARCHAR(9999))
      INSERT INTO likertResp (rt, question, response, trial_type, trial_index, time_elapsed, internal_node_id)
      VALUES(
        JSON_EXTRACT(json, '$.rt'),
        JSON_EXTRACT(json, '$.question'),
        JSON_EXTRACT(json, '$.response'),
        JSON_EXTRACT(json, '$.trial_type'),
        JSON_EXTRACT(json, '$.trial_index'),
        JSON_EXTRACT(json, '$.time_elapsed'),
        JSON_EXTRACT(json, '$.internal_node_id')
      )
  #+end_src

  Execute this code in R (orgmode only)
  
   #+begin_src R :colnames yes :noweb yes :results silent
     con <- DBI::dbConnect(
                   RMariaDB::MariaDB(),
                   host = '127.0.0.1',
                   port = '3306',
                   user = 'root',
                   password = 'example',
                   dbname = 'jsPsych'
                 )
       
     query <- 
       <<quote-blks("insertProc")>>
     DBI::dbSendStatement(con, query)
     DBI::dbDisconnect(con)
   #+end_src
  
  Tidy the object up a little in JS to get rid of nested arrays since all trials are individual responses.

  #+begin_src js :results output
    let json =   
        {
            "trials": [
                {
                    "rt": 2850,
                    "response": {
                        "Vegetables": "2"
                    },
                    "question_order": [
                        0
                    ],
                    "trial_type": "survey-likert",
                    "trial_index": 0,
                    "time_elapsed": 2852,
                    "internal_node_id": "0.0-0.0"
                },
                {
                    "rt": 2048,
                    "response": {
                        "Fruit": 1
                    },
                    "question_order": [
                        0
                    ],
                    "trial_type": "survey-likert",
                    "trial_index": 1,
                    "time_elapsed": 4902,
                    "internal_node_id": "0.0-1.0"
                },
                {
                    "rt": 1948,
                    "response": {
                        "Meat": 3
                    },
                    "question_order": [
                        0
                    ],
                    "trial_type": "survey-likert",
                    "trial_index": 2,
                    "time_elapsed": 6852,
                    "internal_node_id": "0.0-2.0"
                }
            ]
        }
    
    let json_trials =  json.trials.map(x => {
    
        let question = Object.keys(x.response)[0];
        let response = x.response[question];
    
        return({
            rt: x.rt,
            question: question, 
            response: response,
            trial_type: x.trial_type,
            trial_index: x.trial_index,
            time_elapsed: x.time_elapsed,
            internal_node_id: x.internal_node_id
        })
    
    });
    
    let trial_data = {
        json_trials: json_trials,
        proc_method: 'insertLikertResp'
    };
    
    // run postData(trial_data, 'theNameOfTheGeneralPurposeProcedureScriptShownBelow.php')
    console.log(JSON.stringify(trial_data));
    
  #+end_src

  #+RESULTS:
  : {"json_trials":[{"rt":2850,"question":"Vegetables","response":"2","trial_type":"survey-likert","trial_index":0,"time_elapsed":2852,"internal_node_id":"0.0-0.0"},{"rt":2048,"question":"Fruit","response":1,"trial_type":"survey-likert","trial_index":1,"time_elapsed":4902,"internal_node_id":"0.0-1.0"},{"rt":1948,"question":"Meat","response":3,"trial_type":"survey-likert","trial_index":2,"time_elapsed":6852,"internal_node_id":"0.0-2.0"}],"proc_method":"insertLikertResp"}

  Then in PHP just loop through the array of objects and use procedure to insert.
  
  #+begin_src php
    // Get this from POST
    $json_string = '{"json_trials":[{"rt":2850,"question":"Vegetables","response":"2","trial_type":"survey-likert","trial_index":0,"time_elapsed":2852,"internal_node_id":"0.0-0.0"},{"rt":2048,"question":"Fruit","response":1,"trial_type":"survey-likert","trial_index":1,"time_elapsed":4902,"internal_node_id":"0.0-1.0"},{"rt":1948,"question":"Meat","response":3,"trial_type":"survey-likert","trial_index":2,"time_elapsed":6852,"internal_node_id":"0.0-2.0"}],"proc_method":"insertLikertResp"}';
    
    $post_json = json_decode($json_string, true);
    
    $pdo = new PDO('mysql:host=127.0.0.1;port=3306;dbname=jsPsych', 'root', 'example');
    
    $sql_proc = 'CALL ' . $post_json['proc_method'] . '(?)';
        
    $sth = $pdo->prepare($sql_proc);
    
    foreach($post_json['json_trials'] as $x){
    
        $sth->bindValue(1, json_encode($x), PDO::PARAM_STR);
        $sth->execute();
    };
  #+end_src

  #+RESULTS:
  
